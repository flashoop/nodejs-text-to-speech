'use strict';
// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **
exports.__esModule = true;
const gax = require('google-gax');
const path = require('path');
const gapicConfig = require('./text_to_speech_client_config.json');
const version = require('../../../package.json').version;
/**
 *  Service that implements Google Cloud Text-to-Speech API.
 * @class
 * @memberof v1
 */
const TextToSpeechClient = /** @class */ (function () {
  /**
   * Construct an instance of TextToSpeechClient.
   *
   * @param {object} [options] - The configuration object. See the subsequent
   *   parameters for more details.
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   */
  function TextToSpeechClient(opts) {
    this._terminated = false;
    this.descriptors = {
      page: {},
      stream: {},
      longrunning: {},
      batching: {},
    };
    // Ensure that options include the service address and port.
    const staticMembers = this.constructor;
    const servicePath =
      opts && opts.servicePath
        ? opts.servicePath
        : opts && opts.apiEndpoint
        ? opts.apiEndpoint
        : staticMembers.servicePath;
    const port = opts && opts.port ? opts.port : staticMembers.port;
    if (!opts) {
      opts = {servicePath: servicePath, port: port};
    }
    opts.servicePath = opts.servicePath || servicePath;
    opts.port = opts.port || port;
    opts.clientConfig = opts.clientConfig || {};
    const isBrowser = typeof window !== 'undefined';
    if (isBrowser) {
      opts.fallback = true;
    }
    // If we are in browser, we are already using fallback because of the
    // "browser" field in package.json.
    // But if we were explicitly requested to use fallback, let's do it now.
    this._gaxModule = !isBrowser && opts.fallback ? gax.fallback : gax;
    // Create a `gaxGrpc` object, with any grpc-specific options
    // sent to the client.
    opts.scopes = this.constructor.scopes;
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);
    // Save options to use in initialize() method.
    this._opts = opts;
    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth;
    // Determine the client header string.
    const clientHeader = ['gax/' + this._gaxModule.version, 'gapic/' + version];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push('gl-node/' + process.versions.node);
    } else {
      clientHeader.push('gl-web/' + this._gaxModule.version);
    }
    if (!opts.fallback) {
      clientHeader.push('grpc/' + this._gaxGrpc.grpcVersion);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(opts.libName + '/' + opts.libVersion);
    }
    // Load the applicable protos.
    // For Node.js, pass the path to JSON proto file.
    // For browsers, pass the JSON content.
    const nodejsProtoPath = path.join(
      __dirname,
      '..',
      '..',
      'protos',
      'protos.json'
    );
    this._protos = this._gaxGrpc.loadProto(
      opts.fallback
        ? // eslint-disable-next-line @typescript-eslint/no-var-requires
          require('../../protos/protos.json')
        : nodejsProtoPath
    );
    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.cloud.texttospeech.v1.TextToSpeech',
      gapicConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );
    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};
  }
  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  TextToSpeechClient.prototype.initialize = function () {
    const _this = this;
    // If the client stub promise is already initialized, return immediately.
    if (this.textToSpeechStub) {
      return this.textToSpeechStub;
    }
    // Put together the "service stub" for
    // google.cloud.texttospeech.v1.TextToSpeech.
    this.textToSpeechStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? this._protos.lookupService(
            'google.cloud.texttospeech.v1.TextToSpeech'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          this._protos.google.cloud.texttospeech.v1.TextToSpeech,
      this._opts
    );
    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const textToSpeechStubMethods = ['listVoices', 'synthesizeSpeech'];
    const _loop_1 = function (methodName) {
      const callPromise = this_1.textToSpeechStub.then(
        stub => {
          return function () {
            const args = [];
            for (let _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
            }
            if (_this._terminated) {
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          };
        },
        err => {
          return function () {
            throw err;
          };
        }
      );
      const apiCall = this_1._gaxModule.createApiCall(
        callPromise,
        this_1._defaults[methodName],
        this_1.descriptors.page[methodName] ||
          this_1.descriptors.stream[methodName] ||
          this_1.descriptors.longrunning[methodName]
      );
      this_1.innerApiCalls[methodName] = apiCall;
    };
    var this_1 = this;
    for (
      let _i = 0, textToSpeechStubMethods_1 = textToSpeechStubMethods;
      _i < textToSpeechStubMethods_1.length;
      _i++
    ) {
      const methodName = textToSpeechStubMethods_1[_i];
      _loop_1(methodName);
    }
    return this.textToSpeechStub;
  };
  Object.defineProperty(TextToSpeechClient, 'servicePath', {
    /**
     * The DNS address for this API service.
     */
    get: function () {
      return 'texttospeech.googleapis.com';
    },
    enumerable: true,
    configurable: true,
  });
  Object.defineProperty(TextToSpeechClient, 'apiEndpoint', {
    /**
     * The DNS address for this API service - same as servicePath(),
     * exists for compatibility reasons.
     */
    get: function () {
      return 'texttospeech.googleapis.com';
    },
    enumerable: true,
    configurable: true,
  });
  Object.defineProperty(TextToSpeechClient, 'port', {
    /**
     * The port for this API service.
     */
    get: function () {
      return 443;
    },
    enumerable: true,
    configurable: true,
  });
  Object.defineProperty(TextToSpeechClient, 'scopes', {
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     */
    get: function () {
      return ['https://www.googleapis.com/auth/cloud-platform'];
    },
    enumerable: true,
    configurable: true,
  });
  /**
   * Return the project ID used by this class.
   * @param {function(Error, string)} callback - the callback to
   *   be called with the current project Id.
   */
  TextToSpeechClient.prototype.getProjectId = function (callback) {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  };
  /**
   * Returns a list of Voice supported for synthesis.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} [request.languageCode]
   *   Optional. Recommended.
   *   [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tag. If
   *   specified, the ListVoices call will only return voices that can be used to
   *   synthesize this language_code. E.g. when specifying "en-NZ", you will get
   *   supported "en-*" voices; when specifying "no", you will get supported
   *   "no-*" (Norwegian) and "nb-*" (Norwegian Bokmal) voices; specifying "zh"
   *   will also get supported "cmn-*" voices; specifying "zh-hk" will also get
   *   supported "yue-*" voices.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [ListVoicesResponse]{@link google.cloud.texttospeech.v1.ListVoicesResponse}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  TextToSpeechClient.prototype.listVoices = function (
    request,
    optionsOrCallback,
    callback
  ) {
    request = request || {};
    let options;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.listVoices(request, options, callback);
  };
  /**
   * Synthesizes speech synchronously: receive results after all text input
   * has been processed.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.texttospeech.v1.SynthesisInput} request.input
   *   Required. The Synthesizer requires either plain text or SSML as input.
   * @param {google.cloud.texttospeech.v1.VoiceSelectionParams} request.voice
   *   Required. The desired voice of the synthesized audio.
   * @param {google.cloud.texttospeech.v1.AudioConfig} request.audioConfig
   *   Required. The configuration of the synthesized audio.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [SynthesizeSpeechResponse]{@link google.cloud.texttospeech.v1.SynthesizeSpeechResponse}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  TextToSpeechClient.prototype.synthesizeSpeech = function (
    request,
    optionsOrCallback,
    callback
  ) {
    request = request || {};
    let options;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.synthesizeSpeech(request, options, callback);
  };
  /**
   * Terminate the GRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   */
  TextToSpeechClient.prototype.close = function () {
    const _this = this;
    this.initialize();
    if (!this._terminated) {
      return this.textToSpeechStub.then(stub => {
        _this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  };
  return TextToSpeechClient;
})();
exports.TextToSpeechClient = TextToSpeechClient;
